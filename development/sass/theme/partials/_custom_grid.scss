// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
.container {
    @include make-container();
    //max-width: calc(100% - 20px);

    @include media-breakpoint-up(small) {
        max-width: calc(100% - 2rem);
    }
    @include media-breakpoint-up(medium) {
        max-width: calc(100% - 4rem);
    }
    @include media-breakpoint-up(large) {
        max-width: calc(100% - 6rem);
    }
    @include media-breakpoint-up(x-large) {
        max-width: 1140px;
    }
}

$grid-column-widths: (
    one-fourth: 3,
    one-third: 4,
    one-half: 6,
    two-thirds: 8,
    three-quarters: 9,
);

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
    .row,
    .vc_row {
        @include make-row();
    }
}

// Common properties for all breakpoints
%grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);

    @if $enable-flex {
        width: 100%;
    }
}

$breakpoint-counter: 0;
@each $breakpoint in map-keys($breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);

    @for $i from 1 through $grid-column-widths {
        .vc_col-#{$breakpoint}-#{$i},
        .col-#{$breakpoint}-#{$i} {
            @extend %grid-column;
        }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        @if $enable-flex {
            .col-#{$breakpoint} {
                position: relative;
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
                min-height: 1px;
                padding-right: ($grid-gutter-width / 2);
                padding-left: ($grid-gutter-width / 2);
            }
        }

        @for $i from 1 through $grid-columns {
            .vc_col-#{$breakpoint}-#{$i},
            .col-#{$breakpoint}-#{$i} {
                @include make-col($i, $grid-columns, $grid-gutter-width);
            }
        }

        @each $modifier in (pull, push) {
            @for $i from 0 through $grid-columns {
                .#{$modifier}-#{$breakpoint}-#{$i} {
                    @include make-col-modifier($modifier, $i, $grid-columns)
                }
            }
        }

        // `$grid-columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($grid-columns - 1) {
            @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
                .offset-#{$breakpoint}-#{$i} {
                    @include make-col-modifier(offset, $i, $grid-columns)
                }
            }
        }
    }
}

.gutter-left {
    padding-left: $grid-gutter-width / 2;
}

.gutter-right {
    padding-right: $grid-gutter-width / 2;
}

.gutters {
    @extend .gutter-left;
    @extend .gutter-right;
}

.row.no-gutters {
    margin-left: 0 !important;
    margin-right: 0 !important;

    .column,
    .vc_column {
        padding-left: 0 !important;
        padding-right: 0 !important;
    }
}